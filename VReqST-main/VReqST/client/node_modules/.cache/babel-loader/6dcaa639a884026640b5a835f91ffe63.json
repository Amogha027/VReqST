{"ast":null,"code":"var _jsxFileName = \"/home/amogha/btp/VReqST-e2220b1081924feff8bfe2cc9e536fbceae8bc39/VReqST-main/VReqST/client/src/Components/Project/Behaviour.jsx\";\nimport React from \"react\";\nimport { Text, Button } from \"@chakra-ui/react\";\nimport { useDrag, useD } from \"react-dnd\";\n\nfunction Behaviour({\n  obj\n}) {\n  const ref = React.useRef(null);\n  const [, drop] = useDrop({\n    accept: 'box',\n\n    hover(item, monitor) {\n      var _ref$current;\n\n      if (!ref.current) {\n        return;\n      }\n\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      const hoverBoundingRect = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.getBoundingClientRect();\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      const clientOffset = monitor.getClientOffset();\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      handleReorder(dragIndex, hoverIndex);\n      item.index = hoverIndex;\n    }\n\n  });\n  const [{\n    isDragging\n  }, drag] = useDrag(() => ({\n    type: \"behaviour\",\n    item: {\n      obj: obj\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  }));\n  drag(drop(ref));\n  return React.createElement(Button, {\n    backgroundColor: \"blue.200\",\n    height: 10,\n    width: \"auto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Text, {\n    ref: drag,\n    fontSize: \"xl\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, obj.rulename));\n}\n\nexport default Behaviour;","map":{"version":3,"sources":["/home/amogha/btp/VReqST-e2220b1081924feff8bfe2cc9e536fbceae8bc39/VReqST-main/VReqST/client/src/Components/Project/Behaviour.jsx"],"names":["React","Text","Button","useDrag","useD","Behaviour","obj","ref","useRef","drop","useDrop","accept","hover","item","monitor","current","dragIndex","index","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","handleReorder","isDragging","drag","type","collect","rulename"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,kBAA7B;AACA,SAASC,OAAT,EAAkBC,IAAlB,QAA8B,WAA9B;;AAEA,SAASC,SAAT,CAAmB;AAAEC,EAAAA;AAAF,CAAnB,EAA4B;AAC3B,QAAMC,GAAG,GAAGP,KAAK,CAACQ,MAAN,CAAa,IAAb,CAAZ;AACC,QAAM,GAAGC,IAAH,IAAWC,OAAO,CAAC;AACvBC,IAAAA,MAAM,EAAE,KADe;;AAEvBC,IAAAA,KAAK,CAACC,IAAD,EAAOC,OAAP,EAAgB;AAAA;;AACnB,UAAI,CAACP,GAAG,CAACQ,OAAT,EAAkB;AAChB;AACD;;AACD,YAAMC,SAAS,GAAGH,IAAI,CAACI,KAAvB;AACA,YAAMC,UAAU,GAAGD,KAAnB;;AACA,UAAID,SAAS,KAAKE,UAAlB,EAA8B;AAC5B;AACD;;AACD,YAAMC,iBAAiB,mBAAGZ,GAAG,CAACQ,OAAP,iDAAG,aAAaK,qBAAb,EAA1B;AACA,YAAMC,YAAY,GAAG,CAACF,iBAAiB,CAACG,MAAlB,GAA2BH,iBAAiB,CAACI,GAA9C,IAAqD,CAA1E;AACA,YAAMC,YAAY,GAAGV,OAAO,CAACW,eAAR,EAArB;AACA,YAAMC,YAAY,GAAGF,YAAY,CAACG,CAAb,GAAiBR,iBAAiB,CAACI,GAAxD;;AACA,UAAIP,SAAS,GAAGE,UAAZ,IAA0BQ,YAAY,GAAGL,YAA7C,EAA2D;AACzD;AACD;;AACD,UAAIL,SAAS,GAAGE,UAAZ,IAA0BQ,YAAY,GAAGL,YAA7C,EAA2D;AACzD;AACD;;AACDO,MAAAA,aAAa,CAACZ,SAAD,EAAYE,UAAZ,CAAb;AACAL,MAAAA,IAAI,CAACI,KAAL,GAAaC,UAAb;AACD;;AAvBsB,GAAD,CAAxB;AA0BD,QAAM,CAAC;AAAEW,IAAAA;AAAF,GAAD,EAAiBC,IAAjB,IAAyB3B,OAAO,CAAC,OAAO;AAC7C4B,IAAAA,IAAI,EAAE,WADuC;AAE7ClB,IAAAA,IAAI,EAAE;AAAEP,MAAAA,GAAG,EAAEA;AAAP,KAFuC;AAG7C0B,IAAAA,OAAO,EAAGlB,OAAD,KAAc;AACtBe,MAAAA,UAAU,EAAEf,OAAO,CAACe,UAAR;AADU,KAAd;AAHoC,GAAP,CAAD,CAAtC;AAQAC,EAAAA,IAAI,CAACrB,IAAI,CAACF,GAAD,CAAL,CAAJ;AAEA,SACC,oBAAC,MAAD;AACC,IAAA,eAAe,EAAC,UADjB;AAEC,IAAA,MAAM,EAAE,EAFT;AAGC,IAAA,KAAK,EAAC,MAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKC,oBAAC,IAAD;AACC,IAAA,GAAG,EAAEuB,IADN;AAEC,IAAA,QAAQ,EAAC,IAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIExB,GAAG,CAAC2B,QAJN,CALD,CADD;AAcA;;AAED,eAAe5B,SAAf","sourcesContent":["import React from \"react\";\nimport { Text, Button } from \"@chakra-ui/react\";\nimport { useDrag, useD } from \"react-dnd\";\n\nfunction Behaviour({ obj }) {\n\tconst ref = React.useRef(null);\n  const [, drop] = useDrop({\n    accept: 'box',\n    hover(item, monitor) {\n      if (!ref.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      const hoverBoundingRect = ref.current?.getBoundingClientRect();\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      const clientOffset = monitor.getClientOffset();\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n      handleReorder(dragIndex, hoverIndex);\n      item.index = hoverIndex;\n    },\n  });\n\n\tconst [{ isDragging }, drag] = useDrag(() => ({\n\t\ttype: \"behaviour\",\n\t\titem: { obj: obj },\n\t\tcollect: (monitor) => ({\n\t\t\tisDragging: monitor.isDragging(),\n\t\t}),\n\t}));\n\n\tdrag(drop(ref));\n\n\treturn (\n\t\t<Button\n\t\t\tbackgroundColor='blue.200'\n\t\t\theight={10}\n\t\t\twidth='auto'\n\t\t>\n\t\t\t<Text\n\t\t\t\tref={drag}\n\t\t\t\tfontSize='xl'\n\t\t\t>\n\t\t\t\t{obj.rulename}\n\t\t\t</Text>\n\t\t</Button>\n\t);\n}\n\nexport default Behaviour;"]},"metadata":{},"sourceType":"module"}