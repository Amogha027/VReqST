{"ast":null,"code":"var _jsxFileName = \"/home/amogha/btp/VReqST-e2220b1081924feff8bfe2cc9e536fbceae8bc39/VReqST-main/VReqST/client/src/Components/Project/DropArea.jsx\";\nimport { Box, Text, Button, Stack } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport { useDrop } from \"react-dnd\";\n\nconst DropArea = () => {\n  const [board, setBoard] = useState([]);\n  let indices = new Set();\n  const [{\n    isOver,\n    canDrop\n  }, drop] = useDrop(() => ({\n    accept: \"behaviour\",\n    drop: item => addToBoard(item),\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  }));\n\n  const addToBoard = item => {\n    // console.log(item.obj._id);\n    // console.log(indices);\n    if (!indices.has(item.obj._id)) {\n      setBoard(board => [...board, item.obj]);\n      indices = new Set([...indices, item.obj._id]);\n    }\n  };\n\n  const handleReorder = (dragIndex, hoverIndex) => {\n    const dragged = board[dragIndex];\n    const newBoard = [...board];\n    newBoard.splice(dragIndex, 1);\n    newBoard.splice(hoverIndex, 0, dragged);\n    setBoard(newBoard);\n  };\n\n  return board.length > 0 ? React.createElement(Box, {\n    ref: drop,\n    width: 400,\n    height: 500,\n    border: \"1px solid\",\n    position: \"relative\",\n    maxHeight: 500,\n    overflowY: \"auto\",\n    justifyContent: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(Stack, {\n    py: 4,\n    direction: \"column\",\n    paddingLeft: 5,\n    paddingRight: 5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, board.map((p, index) => React.createElement(Button, {\n    backgroundColor: \"blue.200\",\n    height: 10,\n    width: \"auto\",\n    draggable: true,\n    onDragStart: e => {\n      e.dataTransfer.setData('text/plain', index);\n    },\n    onDragOver: e => {\n      e.preventDefault();\n    },\n    onDrop: e => {\n      const dragIndex = parseInt(e.dataTransfer.getData('text/plain'), 10);\n      console.log(dragIndex);\n\n      if (dragIndex != NaN) {\n        const hoverIndex = index;\n\n        if (dragIndex != hoverIndex) {\n          handleReorder(dragIndex, hoverIndex);\n        }\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Text, {\n    fontSize: \"xl\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, p.rulename))))) : React.createElement(Box, {\n    ref: drop,\n    width: 400,\n    height: 500,\n    border: \"1px solid\",\n    position: \"relative\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(Text, {\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Drop Here\"));\n};\n\nexport default DropArea; // <Text fontSize='xl'>\n//   <a\n//     onClick={() => {\n//       // setRule(p);\n//       console.log(p);\n//       // if (perdata.length > 0) {\n//       //   setPerdata(\n//       //     perdata +\n//       //     `,{\"rulename\":\"${p.rulename\n//       //     }\", \"description\":\"${p.description\n//       //     }\",\"logic\": \"${btoa(\n//       //       p.data_name\n//       //     )}\"}\\n`\n//       //   );\n//       // } else {\n//       //   setPerdata(\n//       //     perdata +\n//       //     `{\"rulename\":\"${p.rulename\n//       //     }\", \"description\":\"${p.description\n//       //     }\",\"logic\": \"${btoa(\n//       //       p.data_name\n//       //     )}\"}\\n`\n//       //   );\n//       // }\n//     }}\n//     color=\"white\"\n//   >\n//     {p.rulename}\n//   </a>\n// </Text>","map":{"version":3,"sources":["/home/amogha/btp/VReqST-e2220b1081924feff8bfe2cc9e536fbceae8bc39/VReqST-main/VReqST/client/src/Components/Project/DropArea.jsx"],"names":["Box","Text","Button","Stack","React","useState","useDrop","DropArea","board","setBoard","indices","Set","isOver","canDrop","drop","accept","item","addToBoard","collect","monitor","has","obj","_id","handleReorder","dragIndex","hoverIndex","dragged","newBoard","splice","length","map","p","index","e","dataTransfer","setData","preventDefault","parseInt","getData","console","log","NaN","rulename"],"mappings":"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","sourcesContent":["import { Box, Text, Button, Stack } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport { useDrop } from \"react-dnd\";\n\nconst DropArea = () => {\n\tconst [board, setBoard] = useState([]);\n\tlet indices = new Set();\n\n\tconst [{ isOver, canDrop }, drop] = useDrop(() => ({\n\t\taccept: \"behaviour\",\n\t\tdrop: (item) => addToBoard(item),\n\t\tcollect: (monitor) => ({\n\t\t\tisOver: monitor.isOver(),\n\t\t\tcanDrop: monitor.canDrop(),\n\t\t})\n\t}));\n\t\n\tconst addToBoard = (item) => {\n\t\t// console.log(item.obj._id);\n\t\t// console.log(indices);\n\t\tif (!indices.has(item.obj._id)) {\n\t\t\tsetBoard((board) => [...board, item.obj]);\n\t\t\tindices = new Set([...indices, item.obj._id]);\n\t\t}\n\t};\n\n\tconst handleReorder = (dragIndex, hoverIndex) => {\n\t\tconst dragged = board[dragIndex];\n\t\tconst newBoard = [...board];\n\t\tnewBoard.splice(dragIndex, 1);\n\t\tnewBoard.splice(hoverIndex, 0, dragged);\n\t\tsetBoard(newBoard);\n\t}\n\n\treturn (\n\t\tboard.length > 0 ? (\n\t\t\t<Box\n\t\t\t\tref={drop}\n\t\t\t\twidth={400}\n\t\t\t\theight={500}\n\t\t\t\tborder='1px solid'\n\t\t\t\tposition='relative'\n\t\t\t\tmaxHeight={500}\n\t\t\t\toverflowY='auto'\n\t\t\t\tjustifyContent='center'\n\t\t\t>\n\t\t\t\t<Stack\n\t\t\t\t\tpy={4}\n\t\t\t\t\tdirection=\"column\"\n\t\t\t\t\tpaddingLeft={5}\n\t\t\t\t\tpaddingRight={5}\n\t\t\t\t>\n\t\t\t\t\t{board.map((p, index) => (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tbackgroundColor='blue.200'\n\t\t\t\t\t\t\theight={10}\n\t\t\t\t\t\t\twidth='auto'\n\t\t\t\t\t\t\tdraggable\n\t\t\t\t\t\t\tonDragStart={(e) => {\n\t\t\t\t\t\t\t\te.dataTransfer.setData('text/plain', index);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonDragOver={(e) => {\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonDrop={(e) => {\n\t\t\t\t\t\t\t\tconst dragIndex = parseInt(e.dataTransfer.getData('text/plain'), 10);\n\t\t\t\t\t\t\t\tconsole.log(dragIndex);\n\t\t\t\t\t\t\t\tif (dragIndex != NaN) {\n\t\t\t\t\t\t\t\t\tconst hoverIndex = index;\n\t\t\t\t\t\t\t\t\tif (dragIndex != hoverIndex) {\n\t\t\t\t\t\t\t\t\t\thandleReorder(dragIndex, hoverIndex);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\tfontSize='xl'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{p.rulename}\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t))}\n\t\t\t\t</Stack>\n\t\t\t</Box>\n\t\t) : (\n\t\t\t<Box\n\t\t\t\tref={drop}\n\t\t\t\twidth={400}\n\t\t\t\theight={500}\n\t\t\t\tborder='1px solid'\n\t\t\t\tposition='relative'\n\t\t\t\tjustifyContent='center'\n\t\t\t\talignItems='center'\n\t\t\t>\n\t\t\t\t<Text\n\t\t\t\t\ttextAlign=\"center\"\n\t\t\t\t>Drop Here</Text>\n\t\t\t</Box>\n\t\t)\n\t)\n};\n\nexport default DropArea;\n\n\n\n\n// <Text fontSize='xl'>\n//   <a\n//     onClick={() => {\n//       // setRule(p);\n//       console.log(p);\n//       // if (perdata.length > 0) {\n//       //   setPerdata(\n//       //     perdata +\n//       //     `,{\"rulename\":\"${p.rulename\n//       //     }\", \"description\":\"${p.description\n//       //     }\",\"logic\": \"${btoa(\n//       //       p.data_name\n//       //     )}\"}\\n`\n//       //   );\n//       // } else {\n//       //   setPerdata(\n//       //     perdata +\n//       //     `{\"rulename\":\"${p.rulename\n//       //     }\", \"description\":\"${p.description\n//       //     }\",\"logic\": \"${btoa(\n//       //       p.data_name\n//       //     )}\"}\\n`\n//       //   );\n//       // }\n//     }}\n//     color=\"white\"\n//   >\n//     {p.rulename}\n//   </a>\n// </Text>"]},"metadata":{},"sourceType":"module"}